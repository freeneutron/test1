{"ts":1368880230843,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"exports.config = function(config){\n\t// summary:\n\t//\t\tThis module provides bootstrap configuration for running dojo in node.js\n\n\t// any command line arguments with the load flag are pushed into deps\n\tfor(var deps = [], args = [], i = 0; i < process.argv.length; i++){\n\t\tvar arg = (process.argv[i] + \"\").split(\"=\");\n\t\tif(arg[0] == \"load\"){\n\t\t\tdeps.push(arg[1]);\n\t\t}else{\n\t\t\targs.push(arg);\n\t\t}\n\t}\n\n\tvar fs = require(\"fs\");\n\n\t// make sure global require exists\n\t//if (typeof global.require==\"undefined\"){\n\t//\tglobal.require= {};\n\t//}\n\n\t// reset the has cache with node-appropriate values;\n\tvar hasCache = {\n\t\t\"host-node\":1,\n\t\t\"host-browser\":0,\n\t\t\"dom\":0,\n\t\t\"dojo-has-api\":1,\n\t\t\"dojo-xhr-factory\":0,\n\t\t\"dojo-inject-api\":1,\n\t\t\"dojo-timeout-api\":0,\n\t\t\"dojo-trace-api\":1,\n\t\t\"dojo-dom-ready-api\":0,\n\t\t\"dojo-publish-privates\":1,\n\t\t\"dojo-sniff\":0,\n\t\t\"dojo-loader\":1,\n\t\t\"dojo-test-xd\":0,\n\t\t\"dojo-test-sniff\":0\n\t};\n\tfor(var p in hasCache){\n\t\tconfig.hasCache[p] = hasCache[p];\n\t}\n\n\tvar vm = require('vm'),\n\t\tpath = require('path');\n\n\t// reset some configuration switches with node-appropriate values\n\tvar nodeConfig = {\n\t\tbaseUrl: path.dirname(process.argv[1]),\n\t\tcommandLineArgs:args,\n\t\tdeps:deps,\n\t\ttimeout:0,\n\n\t\t// TODO: really get the locale\n\t\tlocale:\"en-us\",\n\n\t\tloaderPatch: {\n\t\t\tlog:function(item){\n\t\t\t\t// define debug for console messages during dev instead of console.log\n\t\t\t\t// (node's heavy async makes console.log confusing sometimes)\n\t\t\t\tvar util = require(\"util\");\n\t\t\t\tutil.debug(util.inspect(item));\n\t\t\t},\n\n\t\t\teval: function(__text, __urlHint){\n\t\t\t\treturn vm.runInThisContext(__text, __urlHint);\n\t\t\t},\n\n\t\t\tinjectUrl: function(url, callback){\n\t\t\t\ttry{\n\t\t\t\t\tvm.runInThisContext(fs.readFileSync(url, \"utf8\"), url);\n\t\t\t\t\tcallback();\n\t\t\t\t}catch(e){\n\t\t\t\t\tthis.log(\"failed to load resource (\" + url + \")\");\n\t\t\t\t\tthis.log(e);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetText: function(url, sync, onLoad){\n\t\t\t\t// TODO: implement async and http/https handling\n\t\t\t\tonLoad(fs.readFileSync(url, \"utf8\"));\n\t\t\t}\n\t\t}\n\t};\n\tfor(p in nodeConfig){\n\t\tconfig[p] = nodeConfig[p];\n\t}\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":2039}]],"length":2039}
